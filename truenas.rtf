{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 LucidaConsole;\f1\fnil\fcharset0 Calibri;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue139;\red138\green43\blue226;\red105\green105\blue105;
\red0\green191\blue255;\red0\green97\blue97;\red0\green100\blue0;\red168\green45\blue0;\red139\green0\blue0;
\red128\green0\blue128;\red0\green0\blue255;\red0\green0\blue128;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c54510;\csgenericrgb\c54118\c16863\c88627;\csgenericrgb\c41176\c41176\c41176;
\csgenericrgb\c0\c74902\c100000;\csgenericrgb\c0\c38039\c38039;\csgenericrgb\c0\c39216\c0;\csgenericrgb\c65882\c17647\c0;\csgenericrgb\c54510\c0\c0;
\csgenericrgb\c50196\c0\c50196;\csgenericrgb\c0\c0\c100000;\csgenericrgb\c0\c0\c50196;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab708
\pard\pardeftab708\ri-787\partightenfactor0

\f0\fs18 \cf2 function\cf0  \cf3 Connect-TrueNasServer\cf0 \
\{\
    \cf4 [\cf5 CmdletBinding\cf0 ()\cf4 ]\cf0 \
    \cf4 [\cf5 Alias\cf0 ()\cf4 ]\cf0 \
    \cf4 [\cf5 OutputType\cf0 (\cf4 [\cf6 String\cf4 ]\cf0 )\cf4 ]\cf0 \
    \cf2 Param\cf0 \
    (\
        \cf7 # Description d\'92aide Truenas\cf0 \
        \cf4 [\cf5 Parameter\cf0 (Mandatory \cf4 =\cf0  \cf8 $true\cf0 )\cf4 ]\cf0 \
        \cf4 [\cf5 Alias\cf0 (\cf9 "Truenas"\cf0 )\cf4 ]\cf0 \
        \cf8 $Server\cf4 ,\cf0 \
        \cf4 [\cf5 Parameter\cf0 (Mandatory \cf4 =\cf0  \cf8 $false\cf0 )\cf4 ]\cf0 \
        \cf4 [\cf6 String\cf4 ]\cf8 $Username\cf4 ,\cf0 \
        \cf4 [\cf5 Parameter\cf0 (Mandatory \cf4 =\cf0  \cf8 $false\cf0 )\cf4 ]\cf0 \
        \cf4 [\cf6 SecureString\cf4 ]\cf8 $Password\cf4 ,\cf0 \
        \cf4 [\cf5 Parameter\cf0 (Mandatory \cf4 =\cf0  \cf8 $false\cf0 )\cf4 ]\cf0 \
        \cf4 [\cf6 PSCredential\cf4 ]\cf8 $Credentials\cf4 ,\cf0 \
        \cf4 [\cf5 Parameter\cf0 (Mandatory \cf4 =\cf0  \cf8 $false\cf0 )\cf4 ]\cf0 \
        \cf4 [\cf6 switch\cf4 ]\cf8 $httpOnly\cf0  \cf4 =\cf0  \cf8 $false\cf4 ,\cf0 \
        \cf4 [\cf5 Parameter\cf0 (Mandatory \cf4 =\cf0  \cf8 $false\cf0 )\cf4 ]\cf0 \
        \cf4 [\cf6 switch\cf4 ]\cf8 $SkipCertificateCheck\cf0  \cf4 =\cf0  \cf8 $false\cf4 ,\cf0 \
        \cf4 [\cf5 Parameter\cf0 (Mandatory \cf4 =\cf0  \cf8 $false\cf0 )\cf4 ]\cf0 \
        \cf4 [\cf5 ValidateRange\cf0 (\cf10 1\cf4 ,\cf0  \cf10 65535\cf0 )\cf4 ]\cf0 \
        \cf4 [\cf6 int\cf4 ]\cf8 $port\cf0 \
    )\
\
    \cf2 Begin\cf0 \
    \{\
    \}\
    \cf2 Process\cf0 \
    \{\
        \cf8 $Script:SrvFreenas\cf0  \cf4 =\cf0  \cf8 $Server\cf0 \
\
\
        \cf7 #If there is a password (and a user), create a credentials\cf0 \
        \cf2 if\cf0  (\cf8 $Password\cf0 )\
        \{\
            \cf8 $Credentials\cf0  \cf4 =\cf0  \cf11 New-Object\cf0  \cf12 -TypeName\cf0  \cf3 System.Management.Automation.PSCredential\cf0 (\cf8 $Username\cf4 ,\cf0  \cf8 $securecurepassword\cf0 )\
        \}\
        \cf7 #Not Credentials (and no password)\cf0 \
        \cf2 if\cf0  (\cf8 $NULL\cf0  \cf4 -eq\cf0  \cf8 $Credentials\cf0 )\
        \{\
            \cf8 $Credentials\cf0  \cf4 =\cf0  \cf11 Get-Credential\cf0  \cf12 -Message\cf0  \cf9 'Please enter administrative credentials for your TrueNas'\cf0 \
        \}\
        \cf8 $cred\cf0  \cf4 =\cf0  \cf8 $Credentials\cf4 .\cf0 username \cf4 +\cf0  \cf9 ":"\cf0  \cf4 +\cf0  \cf8 $Credentials\cf4 .\cf0 GetNetworkCredential()\cf4 .\cf0 Password\
        \cf8 $base64\cf0  \cf4 =\cf0  \cf4 [\cf6 System.Convert\cf4 ]::\cf0 ToBase64String(\cf4 [\cf6 System.Text.Encoding\cf4 ]::\cf0 ASCII\cf4 .\cf0 GetBytes(\cf8 $cred\cf0 ))\
        \cf7 #headers, We need to have Content-type set to application/json...\cf0 \
        \cf8 $script:headers\cf0  \cf4 =\cf0  @\{ Authorization \cf4 =\cf0  \cf9 "Basic "\cf0  \cf4 +\cf0  \cf8 $base64\cf0 ; \cf9 "Content-type"\cf0  \cf4 =\cf0  \cf9 "application/json"\cf0  \}\
        \cf8 $script:invokeParams\cf0  \cf4 =\cf0  @\{ UseBasicParsing \cf4 =\cf0  \cf8 $true\cf0 ; SkipCertificateCheck \cf4 =\cf0  \cf8 $SkipCertificateCheck\cf0  \}\
\
        \cf2 if\cf0  (\cf9 "Desktop"\cf0  \cf4 -eq\cf0  \cf8 $PSVersionTable\cf4 .\cf0 PsEdition)\
        \{\
            \cf7 #Remove -SkipCertificateCheck from Invoke Parameter (not supported <= PS 5)\cf0 \
            \cf8 $invokeParams\cf4 .\cf0 remove(\cf9 "SkipCertificateCheck"\cf0 )\
        \}\
\
        \cf2 if\cf0  (\cf8 $httpOnly\cf0 )\
        \{\
            \cf2 if\cf0  (\cf4 !\cf8 $port\cf0 )\
            \{\
                \cf8 $port\cf0  \cf4 =\cf0  \cf10 80\cf0 \
            \}\
\
            \cf8 $uri\cf0  \cf4 =\cf0  \cf9 "http://\cf8 $\{Server\}\cf9 :\cf8 $\{port\}\cf9 /api/v2.0/system/info"\cf0 \
\
        \}\
        \cf2 else\cf0 \
        \{\
            \cf2 if\cf0  (\cf4 !\cf8 $port\cf0 )\
            \{\
                \cf8 $port\cf0  \cf4 =\cf0  \cf10 443\cf0 \
            \}\
            \cf7 #for PowerShell (<=) 5 (Desktop), Enable TLS 1.1, 1.2 and Disable SSL chain trust\cf0 \
            \cf2 if\cf0  (\cf9 "Desktop"\cf0  \cf4 -eq\cf0  \cf8 $PSVersionTable\cf4 .\cf0 PsEdition)\
            \{\
                \cf11 Write-Verbose\cf0  \cf12 -Message\cf0  \cf9 "Desktop Version try to Enable TLS 1.1 and 1.2"\cf0 \
                \cf7 #Enable TLS 1.1 and 1.2\cf0 \
                \cf11 Set-TrueNasCipherSSL\cf0 \
                \cf2 if\cf0  (\cf8 $SkipCertificateCheck\cf0 )\
                \{\
                    \cf11 Write-Verbose\cf0  \cf12 -Message\cf0  \cf9 "Disable SSL chain trust"\cf0 \
\
                    \cf7 #Disable SSL chain trust...\cf0 \
                    \cf11 Set-TrueNasuntrustedSSL\cf0 \
                \}\
\
            \}\
            \cf8 $uri\cf0  \cf4 =\cf0  \cf9 "http://\cf8 $\{Server\}\cf9 :\cf8 $\{port\}\cf9 /api/v2.0/system/info"\cf0 \
\
        \}\
\
        \cf8 $script:port\cf0  \cf4 =\cf0  \cf8 $port\cf0 \
        \cf8 $script:httpOnly\cf0  \cf4 =\cf0  \cf8 $httpOnly\cf0 \
        \cf8 $Script:ApiVersion\cf0  \cf4 =\cf0  \cf8 $ApiVersion\cf0 \
\
        \cf2 try\cf0 \
        \{\
            \cf8 $result\cf0  \cf4 =\cf0  \cf11 Invoke-RestMethod\cf0  \cf12 -Uri\cf0  \cf8 $uri\cf0  \cf12 -Method\cf0  \cf3 Get\cf0  \cf12 -SessionVariable\cf0  \cf3 Truenas_S\cf0  \cf12 -headers\cf0  \cf8 $headers\cf0  \cf8 @invokeParams\cf0 \
        \}\
        \cf2 catch\cf0 \
        \{\
            \cf11 Show-TrueNasException\cf0  \cf12 -Exception\cf0  \cf8 $_\cf0 \
            \cf2 throw\cf0  \cf9 "Unable to connect"\cf0 \
        \}\
\
        \cf2 if\cf0  (\cf8 $null\cf0  \cf4 -eq\cf0  \cf8 $result\cf4 .\cf0 version )\
        \{\
            \cf2 throw\cf0  \cf9 "Unable to get data"\cf0 \
        \}\
\
        \cf11 Write-Host\cf0  \cf9 "Welcome on"\cf8 $result\cf4 .\cf0 name\cf9 "-"\cf8 $result\cf4 .\cf0 version\cf9 "-"\cf8 $result\cf4 .\cf0 system_product\cf9 ""\cf0 \
\
        \cf8 $Script:Session\cf0  \cf4 =\cf0  \cf8 $Truenas_S\cf0 \
\
\
    \}\
    \cf2 End\cf0 \
    \{\
\
    \}\
\}\
 \
\pard\pardeftab708\ri-787\partightenfactor0

\f1\fs22 \cf0 \
\
\pard\pardeftab708\ri-787\partightenfactor0

\f0\fs24 \cf0  
\fs18         \cf8 $base64\cf0  \cf4 =\cf0  \cf4 [\cf6 System.Convert\cf4 ]::\cf0 ToBase64String(\cf4 [\cf6 System.Text.Encoding\cf4 ]::\cf0 ASCII\cf4 .\cf0 GetBytes(\cf8 $cred\cf0 ))\
        \cf7 #headers, We need to have Content-type set to application/json...\cf0 \
        \cf8 $script:headers\cf0  \cf4 =\cf0  @\{ Authorization \cf4 =\cf0  \cf9 "Basic "\cf0  \cf4 +\cf0  \cf8 $base64\cf0 ; \cf9 "Content-type"\cf0  \cf4 =\cf0  \cf9 "application/json"\cf0  \}\
        \cf8 $script:invokeParams\cf0  \cf4 =\cf0  @\{ UseBasicParsing \cf4 =\cf0  \cf8 $true\cf0 ; SkipCertificateCheck \cf4 =\cf0  \cf8 $SkipCertificateCheck\cf0  \}\
\
\pard\pardeftab708\ri-787\partightenfactor0

\f1\fs22 \cf0 \
\pard\pardeftab708\ri-787\partightenfactor0

\f0\fs18 \cf2 function\cf0  \cf3 Get-TrueNasDisk\cf0 \
\{\
    \cf4 [\cf5 CmdletBinding\cf0 ()\cf4 ]\cf0 \
    \cf2 Param\cf0 ( )\
    \cf2 begin\cf0 \
    \{\
        \cf8 $uri\cf0  \cf4 =\cf0  \cf9 "api/v2.0/disk"\cf0 \
\
    \}\
    \cf2 process\cf0 \
    \{\
        \cf8 $results\cf0  \cf4 =\cf0  \cf11 Invoke-TrueNasRestMethod\cf0  \cf12 -Uri\cf0  \cf8 $Uri\cf0  \cf12 -Method\cf0  \cf3 Get\cf0 \
\
        \cf2 foreach\cf0  (\cf8 $disk\cf0  \cf2 in\cf0  \cf8 $results\cf0 )\
        \{\
            \cf8 $Name\cf0  \cf4 =\cf0  (\cf8 $disk\cf4 .\cf0 name)\
            \cf8 $Size_GB\cf0  \cf4 =\cf0  (\cf4 [\cf6 Math\cf4 ]::\cf0 Round(\cf8 $disk\cf4 .\cf0 size \cf4 /\cf0  \cf10 1024\cf0  \cf4 /\cf0  \cf10 1024\cf0  \cf4 /\cf0  \cf10 1024\cf4 ,\cf0  \cf10 2\cf0 ))\
            \cf11 Write-Verbose\cf0  \cf12 -Message\cf0  \cf9 " Find the disk \cf8 $name\cf9  with the size \cf8 $Size_GB\cf9 "\cf0 \
            \cf4 [\cf6 PSCustomObject\cf4 ]\cf0 @\{\
                Name    \cf4 =\cf0  (\cf8 $disk\cf4 .\cf0 name)\
                Number  \cf4 =\cf0  (\cf8 $disk\cf4 .\cf0 number)\
                Size_GB \cf4 =\cf0  (\cf4 [\cf6 Math\cf4 ]::\cf0 Round(\cf8 $disk\cf4 .\cf0 size \cf4 /\cf0  \cf10 1024\cf0  \cf4 /\cf0  \cf10 1024\cf0  \cf4 /\cf0  \cf10 1024\cf4 ,\cf0  \cf10 2\cf0 ))\
                Type    \cf4 =\cf0  (\cf8 $disk\cf4 .\cf0 type)\
                Model   \cf4 =\cf0  (\cf8 $disk\cf4 .\cf0 model)\
\
            \}\
        \}\
    \}\
    \cf2 end\cf0 \
    \{ \}\
\}\
 \
}